name: Function App CI/CD → APIM import

on:
  push:
    # branches: [ main ]
  workflow_dispatch:

env:
  # These can reference secrets (preferred) or plain repo variables.
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_FUNCTIONAPP_NAME: ${{ secrets.AZURE_FUNCTIONAPP_NAME }}
  AZURE_APIM_NAME: ${{ secrets.AZURE_APIM_NAME }}
  API_ID: ${{ secrets.API_ID }}
  API_PATH: ${{ secrets.API_PATH }}
  API_DISPLAY_NAME: ${{ secrets.API_DISPLAY_NAME }}
  SWAGGER_URL_PATH: ${{ secrets.SWAGGER_URL_PATH }}  # e.g. /api/swagger.json

permissions:
  contents: read

jobs:
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect language and install dependencies (Node/Python)
        shell: bash
        run: |
          set -e
          if [ -f package.json ]; then
            echo "Detected Node.js project"
            npm ci
            npm run build --if-present
          elif [ -f requirements.txt ]; then
            echo "Detected Python project"
            python -m venv .venv
            source .venv/bin/activate
            pip install -r requirements.txt
          else
            echo "No package.json or requirements.txt found — skipping dependency install"
          fi

      - name: Ensure openapi file presence (optional)
        shell: bash
        run: |
          # If you have swagger.json or openapi.json in repo, keep it at root or update path.
          if [ -f openapi.json ]; then
            echo "Found openapi.json"
          elif [ -f swagger.json ]; then
            cp swagger.json openapi.json
            echo "Copied swagger.json -> openapi.json"
          else
            echo "No openapi.json found in repo. Workflow will try function URL after deploy."
          fi

      - name: Create package (zip)
        shell: bash
        run: |
          rm -f functionapp.zip
          # exclude node_modules, venv, .git to keep zip small
          zip -r functionapp.zip . -x '*.git*' 'node_modules/*' '.venv/*' '__pycache__/*' '.github/*'

      - name: Upload artifact (function zip)
        uses: actions/upload-artifact@v3
        with:
          name: functionapp
          path: functionapp.zip

  deploy:
    name: Deploy to Azure & Import to APIM
    runs-on: ubuntu-latest
    needs: build
    environment: production
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: functionapp
          path: ./deploy

      - name: Azure Login (Service Principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Function App (zip deploy)
        uses: azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: ./deploy/functionapp.zip

      - name: Wait for function + import API into APIM
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -euo pipefail

            RG="${AZURE_RESOURCE_GROUP}"
            APIM_NAME="${AZURE_APIM_NAME}"
            FUNC_NAME="${AZURE_FUNCTIONAPP_NAME}"
            API_ID="${API_ID}"
            API_PATH="${API_PATH}"
            API_DISPLAY_NAME="${API_DISPLAY_NAME}"
            SWAGGER_PATH="${SWAGGER_URL_PATH:-/api/swagger.json}"

            # prefer local openapi.json if present in artifact
            if [ -f "./deploy/openapi.json" ]; then
              echo "Using local ./deploy/openapi.json to import into APIM"
              az apim api import \
                --resource-group "$RG" \
                --service-name "$APIM_NAME" \
                --path "$API_PATH" \
                --api-id "$API_ID" \
                --specification-format OpenApi \
                --specification-path "./deploy/openapi.json" \
                --service-url "https://${FUNC_NAME}.azurewebsites.net" \
                --display-name "$API_DISPLAY_NAME" \
                --subscription-required true
              echo "APIM import (from local file) completed."
              exit 0
            fi

            # Otherwise poll the function's swagger URL until it becomes reachable
            SWAGGER_URL="https://${FUNC_NAME}.azurewebsites.net${SWAGGER_PATH}"
            echo "No local openapi.json found; will attempt to fetch swagger from: $SWAGGER_URL"

            MAX_TRIES=30
            SLEEP_SEC=5
            status="000"
            for i in $(seq 1 $MAX_TRIES); do
              echo "Checking swagger availability (try $i/$MAX_TRIES)..."
              status=$(curl -s -o /dev/null -w "%{http_code}" "$SWAGGER_URL" || echo "000")
              echo "Status: $status"
              if [ "$status" = "200" ]; then
                echo "Swagger reachable."
                break
              fi
              sleep $SLEEP_SEC
            done

            if [ "$status" != "200" ]; then
              echo "ERROR: swagger not reachable at $SWAGGER_URL and no local openapi.json present. Aborting."
              exit 1
            fi

            echo "Importing API from $SWAGGER_URL into APIM..."
            az apim api import \
              --resource-group "$RG" \
              --service-name "$APIM_NAME" \
              --path "$API_PATH" \
              --api-id "$API_ID" \
              --specification-format OpenApi \
              --specification-url "$SWAGGER_URL" \
              --service-url "https://${FUNC_NAME}.azurewebsites.net" \
              --display-name "$API_DISPLAY_NAME" \
              --subscription-required true

            echo "APIM import (from function URL) completed."

